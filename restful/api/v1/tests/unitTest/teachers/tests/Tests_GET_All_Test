<?php

namespace lsantsan\unitTest;

use lsantsan\service\controller\TeachersServiceController;
use lsantsan\model\ServiceException;
use lsantsan\model\Test;
use \PDOException;

require_once(__DIR__ . '/../../BasicTestCase.php');
require_once(__DIR__ . '/../../../../models/Code.php');
require_once(__DIR__ . '/../../../../models/Test.php');

class Tests_GET_All_Test extends BasicTestCase
{
    const TEACHER_ID = 233;
    protected $serviceDataArray = array(
        'method' => 'GET',
        'url' => [Tests_GET_All_Test::TEACHER_ID, 'tests']); //URL: /{teacherId}/tests/
    protected $requiredInputsArray = ['accessToken'];
    protected $basenameFile = 'Tests.php';

    public function testTestsGET_Success()
    {
        //Defining the mocked methods
        $this->createUtilMock(['checkInput', 'nullCheckForTables']);
        $this->createTableMock('TeacherTbl', ['isTeacherAdmin']);
        $this->createTableMock('TokenTbl', ['retrieveToken']);
        $this->createTableMock('TestTbl', ['getAllTests']);

        //Input
        $accessToken = '9c8838a2942e47dff29e5b5dd3f0d9d6';
        $consumerId = Tests_GET_All_Test::TEACHER_ID;

        //Output
        $testOutputArray = $this->createTestOutputArray();

        $arrayInput = array('accessToken' => $accessToken);
        $jsonOutput = $testOutputArray;

        $this->serviceDataArray['payload'] = $arrayInput;

        // ASSERTING STUB's METHODS
        $this->_tokenTblStub->expects($this->once())
            ->method('retrieveToken')
            ->with(
                $this->stringContains($accessToken))
            ->willReturn(array('user_id' => $consumerId,
                'creation_date' => date('Y-m-d H:i:s')));

        // UTIL STUB's mocked methods
        $this->_utilStub->expects($this->exactly(1))
            ->method('checkInput')
            ->with(
                $this->identicalTo($this->requiredInputsArray)
                , $this->identicalTo($arrayInput));

        $this->_utilStub->expects($this->exactly(1))
            ->method('nullCheckForTables')
            ->with(
                $this->anything()
                , $this->stringContains($this->basenameFile));

        $this->_teacherTblStub->expects($this->once())
            ->method('isTeacherAdmin')
            ->with(
                $this->stringContains($consumerId))
            ->willReturn(1);

        $this->_testTblStub->expects($this->once())
            ->method('getAllTests')
            ->with(
                $this->stringContains($consumerId))
            ->willReturn($testOutputArray);

        //TRIGGERING CALL
        $teacherService = new TeachersServiceController($this->serviceDataArray, $this->dependencyArray);
        $serviceOutput = $teacherService->runService();
        $this->assertJsonStringEqualsJsonString(
            json_encode($jsonOutput)
            , json_encode($serviceOutput)
        );
    }

    public function testTestsGET_EmptyList()
    {
        //Defining the mocked methods
        $this->createUtilMock(['checkInput', 'nullCheckForTables']);
        $this->createTableMock('TeacherTbl', ['isTeacherAdmin']);
        $this->createTableMock('TokenTbl', ['retrieveToken']);
        $this->createTableMock('TestTbl', ['getAllTests']);

        //Input
        $accessToken = '9c8838a2942e47dff29e5b5dd3f0d9d6';
        $consumerId = Tests_GET_All_Test::TEACHER_ID;

        //Output
        $code = 'rest-110';
        $message = 'Record Not Found';
        $details = "No tests found.";
        $httpCode = 404;

        $arrayInput = array('accessToken' => $accessToken);
        $jsonOutput = $this->createOutputJson($code, $message, $details);

        $this->serviceDataArray['payload'] = $arrayInput;

        // ASSERTING STUB's METHODS
        $this->_tokenTblStub->expects($this->once())
            ->method('retrieveToken')
            ->with(
                $this->stringContains($accessToken))
            ->willReturn(array('user_id' => $consumerId,
                'creation_date' => date('Y-m-d H:i:s')));

        // UTIL STUB's mocked methods
        $this->_utilStub->expects($this->exactly(1))
            ->method('checkInput')
            ->with(
                $this->identicalTo($this->requiredInputsArray)
                , $this->identicalTo($arrayInput));

        $this->_utilStub->expects($this->exactly(1))
            ->method('nullCheckForTables')
            ->with(
                $this->anything()
                , $this->stringContains($this->basenameFile));

        $this->_teacherTblStub->expects($this->once())
            ->method('isTeacherAdmin')
            ->with(
                $this->stringContains($consumerId))
            ->willReturn(1);

        $this->_testTblStub->expects($this->once())
            ->method('getAllTests')
            ->with(
                $this->stringContains($consumerId))
            ->willReturn(NULL);

        //TRIGGERING CALL
        $teacherService = new TeachersServiceController($this->serviceDataArray, $this->dependencyArray);
        $this->expectException(ServiceException::class);
        $this->expectExceptionCode($httpCode);
        $this->expectExceptionMessage(json_encode($jsonOutput));
        $teacherService->runService();
    }
//TODO: Finish Unit Tests for Tests_Get_All
}